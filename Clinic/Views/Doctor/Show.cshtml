@model Clinic.Models.DoctorDto

@{
    ViewData["Title"] = "Doctor Details";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">
        <span class="text-muted fw-light">Doctors /</span> Details
    </h4>

    <div class="row justify-content-center">
        <div class="col-lg-10 col-md-12">
            <!-- Doctor Information Card -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-header bg-white border-bottom-0">
                    <h5 class="mb-0">
                        <i class="bx bx-user-check me-2"></i>Doctor Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <div>
                                <label class="form-label fw-medium mb-0">Full Name</label>
                                <div class="form-control-plaintext ps-2">
                                    @Model.FullName
                                </div>
                            </div>
                            <div>
                                <label class="form-label fw-medium mb-0">Employee ID</label>
                                <div class="form-control-plaintext ps-2">
                                    @(Model.SchoolID ?? "Not provided")
                                </div>
                            </div>
                            <div>
                                <label class="form-label fw-medium mb-0">Email</label>
                                <div class="form-control-plaintext ps-2">@Model.Email</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div>
                                <label class="form-label fw-medium mb-0">Username</label>
                                <div class="form-control-plaintext ps-2">@Model.Username</div>
                            </div>
                            <div>
                                <label class="form-label fw-medium mb-0">Specialization</label>
                                <div class="form-control-plaintext ps-2">
                                    @(Model.Program ?? "Not specified")
                                </div>
                            </div>
                            <div>
                                <label class="form-label fw-medium mb-0">Created Date</label>
                                <div class="form-control-plaintext ps-2">
                                    @Model.CreatedAt.ToString("MMM dd, yyyy")
                                </div>
                            </div>
                            <div>
                                <label class="form-label fw-medium mb-0">Last Updated</label>
                                <div class="form-control-plaintext ps-2">
                                    @Model.UpdatedAt.ToString("MMM dd, yyyy")
                                </div>
                            </div>
                        </div>
                    </div>

                    <hr />

                    <div class="d-flex justify-content-end gap-2">
                        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">
                            <i class="bx bx-edit-alt me-1"></i>Edit
                        </a>
                        <a asp-action="Index" class="btn btn-outline-secondary">
                            <i class="bx bx-arrow-back me-1"></i>Back to List
                        </a>
                    </div>
                </div>
            </div>

            <!-- Time Slots Management Card -->
            <div class="card shadow-sm border-0">
                <div class="card-header bg-white border-bottom-0 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bx bx-time me-2"></i>Time Slots Management
                    </h5>
                    <button type="button" class="btn btn-primary" onclick="showCreateTimeSlotModal()">
                        <i class="bx bx-plus me-1"></i>Add Time Slot
                    </button>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="timeSlotsTable">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Status</th>
                                    <th>Appointment</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="timeSlotsTableBody">
                                <tr><td colspan="6" class="text-center text-muted">Loading time slots...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Time Slot Modal -->
<div class="modal fade" id="timeSlotModal" tabindex="-1" aria-labelledby="timeSlotModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="timeSlotModalLabel">Add Time Slot</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="timeSlotForm">
                <div class="modal-body">
                    <input type="hidden" id="timeSlotId" value="0" />
                    <input type="hidden" id="doctorId" value="@Model.Id" />

                    <div class="mb-3">
                        <label for="timeSlotDate" class="form-label">Date *</label>
                        <input type="date" class="form-control" id="timeSlotDate" required />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="startTime" class="form-label">Start Time *</label>
                                <input type="time" class="form-control" id="startTime" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="endTime" class="form-label">End Time *</label>
                                <input type="time" class="form-control" id="endTime" required />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="saveTimeSlotBtn">Save Time Slot</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    let timeSlotModal;
    let dataTable; // Store DataTable instance
    const doctorId = @Model.Id;

    document.addEventListener('DOMContentLoaded', function() {
        console.log('Page loaded, Doctor ID:', doctorId);
        timeSlotModal = new bootstrap.Modal(document.getElementById('timeSlotModal'));

        // Load time slots first, then initialize DataTable
        loadTimeSlots();

        // Form submission handler
        document.getElementById('timeSlotForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveTimeSlot();
        });
    });

    function loadTimeSlots() {
        const apiUrl = `/api/timeslots/doctor/${doctorId}`;
        console.log('Loading time slots from:', apiUrl);

        fetch(apiUrl)
            .then(response => {
                console.log('Response status:', response.status);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);
                console.log('Data length:', Array.isArray(data) ? data.length : 'Not an array');

                const tbody = document.getElementById('timeSlotsTableBody');
                tbody.innerHTML = '';

                // Destroy existing DataTable if it exists
                if (dataTable) {
                    dataTable.destroy();
                    dataTable = null;
                }

                if (!data || !Array.isArray(data) || data.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">No time slots available</td></tr>';
                    console.log('No time slots found');
                    return;
                }

                // Populate table with data
                data.forEach((timeSlot, index) => {
                    console.log(`Processing time slot ${index}:`, timeSlot);
                    const row = createTimeSlotRow(timeSlot);
                    tbody.appendChild(row);
                });

                // Initialize DataTable after data is loaded
                setTimeout(() => {
                    dataTable = $('#timeSlotsTable').DataTable({
                        "order": [[ 0, "asc" ], [ 1, "asc" ]], // Sort by date, then start time
                        "pageLength": 10,
                        "responsive": true
                    });
                }, 100);

                console.log(`Successfully loaded ${data.length} time slots`);
            })
            .catch(error => {
                console.error('Error loading time slots:', error);
                const tbody = document.getElementById('timeSlotsTableBody');
                tbody.innerHTML = `<tr><td colspan="6" class="text-center text-danger">Error: ${error.message}</td></tr>`;

                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: `Failed to load time slots: ${error.message}`
                });
            });
    }

    function createTimeSlotRow(timeSlot) {
        console.log('Creating row for time slot:', timeSlot);

        const row = document.createElement('tr');

        // Parse the dates from the API response
        const startTime = new Date(timeSlot.startTime);
        const endTime = new Date(timeSlot.endTime);

        // Check if dates are valid
        if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {
            console.error('Invalid date in time slot:', timeSlot);
            row.innerHTML = '<td colspan="6" class="text-center text-danger">Invalid date format</td>';
            return row;
        }

        row.innerHTML = `
            <td>${startTime.toLocaleDateString()}</td>
            <td>${startTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</td>
            <td>${endTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</td>
            <td>
                <span class="badge ${timeSlot.isAvailable ? 'bg-success' : 'bg-warning'}">
                    ${timeSlot.isAvailable ? 'Available' : 'Booked'}
                </span>
            </td>
            <td>${timeSlot.appointmentReason || '-'}</td>
            <td>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="editTimeSlot(${timeSlot.id})" ${!timeSlot.isAvailable ? 'disabled' : ''}>
                        <i class="bx bx-edit-alt"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteTimeSlot(${timeSlot.id})" ${!timeSlot.isAvailable ? 'disabled' : ''}>
                        <i class="bx bx-trash"></i>
                    </button>
                </div>
            </td>
        `;

        return row;
    }

    function showCreateTimeSlotModal() {
        document.getElementById('timeSlotModalLabel').textContent = 'Add Time Slot';
        document.getElementById('timeSlotForm').reset();
        document.getElementById('timeSlotId').value = '0';
        document.getElementById('saveTimeSlotBtn').textContent = 'Save Time Slot';

        // Set minimum date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('timeSlotDate').min = today;

        timeSlotModal.show();
    }

    function editTimeSlot(id) {
        fetch(`/api/timeslots/${id}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(timeSlot => {
                document.getElementById('timeSlotModalLabel').textContent = 'Edit Time Slot';
                document.getElementById('timeSlotId').value = timeSlot.id;
                document.getElementById('saveTimeSlotBtn').textContent = 'Update Time Slot';

                const startTime = new Date(timeSlot.startTime);
                const endTime = new Date(timeSlot.endTime);

                document.getElementById('timeSlotDate').value = startTime.toISOString().split('T')[0];
                document.getElementById('startTime').value = startTime.toTimeString().slice(0, 5);
                document.getElementById('endTime').value = endTime.toTimeString().slice(0, 5);

                timeSlotModal.show();
            })
            .catch(error => {
                console.error('Error loading time slot:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to load time slot details'
                });
            });
    }

    function saveTimeSlot() {
        // Validate form inputs
        const date = document.getElementById('timeSlotDate').value;
        const startTime = document.getElementById('startTime').value;
        const endTime = document.getElementById('endTime').value;

        if (!date || !startTime || !endTime) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please fill in all required fields'
            });
            return;
        }

        // Validate start time is before end time
        if (startTime >= endTime) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Start time must be before end time'
            });
            return;
        }

        const formData = {
            id: parseInt(document.getElementById('timeSlotId').value),
            doctorId: doctorId,
            startTime: `${date}T${startTime}:00`,
            endTime: `${date}T${endTime}:00`
        };

        console.log('Saving time slot:', formData);

        const isEdit = formData.id > 0;
        const url = isEdit ? `/api/timeslots/${formData.id}` : '/api/timeslots';
        const method = isEdit ? 'PUT' : 'POST';

        fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            console.log('Save response:', response);
            if (response.ok) {
                timeSlotModal.hide();

                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: isEdit ? 'Time slot updated successfully' : 'Time slot created successfully',
                    timer: 2000,
                    showConfirmButton: false
                });

                // Reload time slots after successful save
                setTimeout(() => {
                    loadTimeSlots();
                }, 500);
            } else {
                return response.text().then(text => {
                    throw new Error(text || 'Failed to save time slot');
                });
            }
        })
        .catch(error => {
            console.error('Error saving time slot:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to save time slot'
            });
        });
    }

    function deleteTimeSlot(id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/api/timeslots/${id}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Deleted!',
                            text: 'Time slot has been deleted.',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        // Reload time slots after successful delete
                        setTimeout(() => {
                            loadTimeSlots();
                        }, 500);
                    } else {
                        return response.text().then(text => {
                            throw new Error(text || 'Failed to delete time slot');
                        });
                    }
                })
                .catch(error => {
                    console.error('Error deleting time slot:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to delete time slot'
                    });
                });
            }
        });
    }
</script>

<style>
    .card {
        border-radius: 0.5rem;
        box-shadow: 0 2px 8px 0 rgba(8, 120, 48, 0.08);
    }

    .form-control-plaintext {
        background: #f8f9fa;
        border-radius: 0.375rem;
        padding: 0.5rem 0.75rem;
        margin-bottom: 1rem;
        font-size: 1rem;
    }

    .fw-medium {
        font-weight: 500;
    }

    .ps-2 {
        padding-left: 0.5rem;
    }

    .btn-primary {
        background-color: #087830;
        border-color: #087830;
    }

        .btn-primary:hover {
            background-color: #0a5d29;
            border-color: #0a5d29;
        }

    .table th {
        background-color: #f8f9fa;
        border-bottom: 2px solid #dee2e6;
        font-weight: 600;
    }

    .badge {
        font-size: 0.75rem;
        padding: 0.375rem 0.5rem;
    }

    .btn-group .btn {
        border-radius: 0.25rem;
        margin: 0 0.125rem;
    }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
</style>